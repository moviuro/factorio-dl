#!/bin/sh

# Inspired by the (complicated!) PKGBUILDs for factorio and
# factorio-experimental on https://aur.archlinux.org

# Ported to ~POSIX sh for fun (and *BSD compatibility)
# Depends on jq(1) and curl(1)

__usage() {
  cat << EOH
$0 [-di] [-b build] [-o <output>] [-y /path/player-data.json] [-t target] [version]
$0 [-di] [-b build] [-o <output>] [-l login -p password] [-t target] [version]
$0 -h

$0 will download the factorio game from the Factorio website, with no
interaction from the user.

-d
  enable debug (set -x)

-i
  interactive
  if enabled, we might require some human interaction; it is not the default

-t
  specify the target platform; output will be changed accordingly.
  Known values:
   - linux64
   - osx
   - win64
   - win64-manual
  By default: depends on your current platform

-o output
  specify output file.
  Default value, depending on the target:
   - factorio_<build>_<version>.tar.xz
   - factorio_<build>_<version>.dmg
   - Setup_Factorio(Demo)?_x64_<version>.exe
   - Factorio(Demo)?_x64_<version>.zip

-l login -p password
  specify login and password values to supply at https://factorio.com/login
  FACTORIO_LOGIN default value: $(whoami)
  FACTORIO_PASSWORD default value: <empty>
  NB: your shell logs input! Use an empty space in front of $0 if you use -p
  See also: \$HISTCONTROL, your shell's manual...

-y /path/player-data.json
  alternatively to using login and password, or even the \$FACTORIO_PASSWORD env
  variable, $0 can use the player-data.json file which holds a valid token as
  well as a factorio username
  FACTORIO_PD default value: depends on your current platform
   - $HOME/.factorio/player-data.json on Linux and assimilate
   - $HOME/Library/Application Support/factorio/player-data.json on macOS
   - %HOMEDRIVE%%HOMEPATH%/AppData/Roaming/Factorio/player-data.json on WSL

-h
  Display this help text.

-b build
  There are four builds:
   - alpha (the default), which requires a valid login+password or player data
     file, the current standard full-featured build
   - demo, which is free as in free beer, publicly accessible demo versions
     (stable versions only)
   - expansion, which includes the "Space Age" content. Same as "alpha", it
     requires a valid login+password or player data file
   - headless, which is free as in free beer, for running servers on machines
     without graphical interface (linux64 version only, see -t)

version
  either:
    - a number such as 0.16.51 or 0.17.58;
    - experimental (the default)*
    - stable*
  $0 supports any prefix that ends with '://'. This is meant to ease integration
  into build scripts, such as PKGBUILD(5) on Archlinux. As such, the following
  commands are equivalent:
    % $0 0.16.51
    % $0 factorio://0.16.51
  *version grabbing from the updater.factorio.com API is not officially
   documented, it is recommended to pass a version number
EOH
}

__warn() {
  echo "$1" >&2
}

__die() {
  echo "$1" >&2; exit "${2:-1}"
}

while getopts ":b:dhil:p:o:t:y:" _opt; do
  case "$_opt" in
    b) FACTORIO_BUILD="$OPTARG"    ;;
    d) set -x                      ;;
    h) __usage; exit 0             ;;
    i) _interactive="1"            ;;
    t) FACTORIO_TARGET="$OPTARG"   ;;
    l) FACTORIO_LOGIN="$OPTARG"    ;;
    p) FACTORIO_PASSWORD="$OPTARG" ;;
    o) output_file="$OPTARG"       ;;
    y) FACTORIO_PD="$OPTARG"       ;;
    *) __die "$(__usage)" 1        ;;
  esac
done

shift "$((OPTIND-1))"

for _dep in curl jq; do
  if ! command -v "$_dep" >/dev/null 2>&1; then
    __die "$_dep needed but not found!" 2
  fi
done

# Set default values for target and player-data file if they weren't supplied
if [ "$(uname -s)" = "Darwin" ]; then
  : "${FACTORIO_TARGET:="osx"}"
  : "${FACTORIO_PD:="$HOME/Library/Application Support/factorio/player-data.json"}"
elif uname -a | grep -q 'Microsoft'; then
  : "${FACTORIO_TARGET:="win64"}"
  if [ -z "$FACTORIO_PD" ]; then
    FACTORIO_PD="$(cmd.exe /c 'echo %HOMEDRIVE%%HOMEPATH%' | tr -d '\r' |
     tr \\ /)/AppData/Roaming/Factorio/player-data.json"
  fi
else # Even on BSD and whatnot
  : "${FACTORIO_TARGET:="linux64"}"
  : "${FACTORIO_PD:="$HOME/.factorio/player-data.json"}"
fi

# Set the default build type
: "${FACTORIO_BUILD:="alpha"}"
case "$FACTORIO_BUILD" in
  alpha|demo|headless|expansion) : ;;
  *) __die "Supported builds: alpha, demo, headless, expansion; not $FACTORIO_BUILD" 4;;
esac

# Grab the username and token from the player-data.json file
if [ -r "$FACTORIO_PD" ]; then
  FACTORIO_TOKEN="$(jq -r '.["service-token"] | select (.!=null)' < \
   "$FACTORIO_PD")"
  if [ -z "$FACTORIO_LOGIN" ]; then
    FACTORIO_LOGIN="$(jq -r '.["service-username"] | select (.!=null)' < \
     "$FACTORIO_PD")"
  fi
fi
if [ -z "$FACTORIO_LOGIN" ]; then
  FACTORIO_LOGIN="$(whoami)"
fi

# If we didn't get the token from the player-data file, we try to get one from
# the factorio auth API
# This is only needed for the alpha version
if [ -z "$FACTORIO_TOKEN" ] && [ "${FACTORIO_BUILD}" = "alpha" ]; then
  __warn "No token in $FACTORIO_PD"
  while [ -z "$FACTORIO_PASSWORD" ]; do
    if [ -z "$_interactive" ]; then
      __die "No password was set, aborting" 6
    else
      # We write a ~POSIX-compliant script; `read -s` doesn't work on e.g. FreeBSD
      stty -echo
      printf "factorio.com password for $FACTORIO_LOGIN: "
      read -r FACTORIO_PASSWORD
      stty echo
      printf '\n'
    fi
  done
  _auth_url="https://auth.factorio.com/api-login?require_game_ownership=true&username=$FACTORIO_LOGIN&password=$FACTORIO_PASSWORD"
  __warn "Trying to get one from auth.factorio.com/api-login"
  _auth_response="$(curl -XPOST "${_auth_url}")"
  # a code was emailed to us
  if [ "$(printf '%s\n' "$_auth_response" | jq -r .error 2>/dev/null)" = "email-authentication-required" ]; then
    while [ -z "$FACTORIO_EMAIL_CODE" ]; do
      printf 'Email auth code: '
      read -r FACTORIO_EMAIL_CODE
      printf '\n'
    done
    _auth_response="$(curl -XPOST \
     "${_auth_url}&email_authentication_code=$FACTORIO_EMAIL_CODE")"
  fi
  if ! FACTORIO_TOKEN="$(printf '%s\n' "$_auth_response" | jq -re .[] 2>/dev/null)"; then
    __die "Didn't get a token using $FACTORIO_LOGIN and password" 7
  fi
fi

# We strip the ".*://" prefix of the argument.
# It's needed because makepkg(1) will pass 'protocol://version' as $1
# Humans invoking the script can still use version alone as $1
version="${1##*://}"
_latest_json="https://factorio.com/api/latest-releases"
case "$version" in
  ""|experimental|stable)
    : "${version:="experimental"}"
    __warn "Trying $_latest_json for $version, might be broken"
    version="$(curl -s "${_latest_json}" |
     jq -rc ".$version.alpha"
    )"
    __warn "Got $version"
    ;;
esac
# Whatever happened above, $version should now hold a semantic version.
# If grep(1) fails below, we abort.
if ! printf '%s' "$version" | grep -qE '[0-9]+\.[0-9]+\.[0-9]+'; then
  __die "version looks very weird: $version" 3
fi

case "$FACTORIO_TARGET" in
  linux64)
    : "${output_file:="factorio_${FACTORIO_BUILD}_x64_${version}.tar.xz"}" ;;
  win64-manual)
    case "$FACTORIO_BUILD" in
      alpha) : "${output_file:="Factorio_x64_${version}.zip"}"             ;;
      demo)  : "${output_file:="FactorioDemo_x64_${version}.zip"}"         ;;
      expansion) : "${output_file:="factorio-expansion_win_x64_${version}.zip"}" ;;
      *)     __die "Does not exist: $FACTORIO_BUILD $FACTORIO_TARGET" 10   ;;
    esac ;;
  win64)
    case "$FACTORIO_BUILD" in
      alpha) : "${output_file:="Setup_Factorio_x64_${version}.exe"}"       ;;
      demo)  : "${output_file:="Setup_FactorioDemo_x64_${version}.exe"}"   ;;
      expansion) : "${output_file:="Setup_FactorioSpaceAge_${version}.exe"}";;
      *)     __die "Does not exist: $FACTORIO_BUILD $FACTORIO_TARGET" 10   ;;
    esac ;;
  osx)
    case "$FACTORIO_BUILD" in
      alpha|demo|expansion)
        : "${output_file:="factorio_${FACTORIO_BUILD}_${version}.dmg"}"    ;;
      *) __die "Does not exist: $FACTORIO_BUILD $FACTORIO_TARGET" 10       ;;
    esac ;;
  *) __die "Unknown target platform: $FACTORIO_TARGET" 5                   ;;
esac

FACTORIO_URL="https://www.factorio.com/get-download/${version}/${FACTORIO_BUILD}/${FACTORIO_TARGET}"

curl -G --retry 10 --retry-delay 3 \
     --fail --location \
     --continue-at - \
     --data-urlencode "username=${FACTORIO_LOGIN}" \
     --data-urlencode "token=${FACTORIO_TOKEN}" \
     --output "${output_file}.part" \
     "${FACTORIO_URL}" \
|| rm -f "${output_file}.part"

if [ ! -f "${output_file}.part" ]; then
  __die "Download failed" 9
fi

if [ -f "${output_file}.part" ]; then
  mv "${output_file}.part" "${output_file}"
fi

