#!/bin/sh

# Inspired by the (complicated!) PKGBUILDs for factorio and
# factorio-experimental on https://aur.archlinux.org

# Ported to ~POSIX sh for fun (and *BSD compatibility)
# Depends on jq(1) and curl(1)

: "${FACTORIO_TARGET:="linux64"}"
: "${FACTORIO_PD:="$HOME/.factorio/player-data.json"}"

__usage() {
  cat << EOH
$0 [-di] [-o <output>] [-y /path/player-data.json] [-t target] [version]
$0 [-di] [-o <output>] [-l login -p password] [-t target] [version]
$0 -h

$0 will download the factorio game from the Factorio website, with no
interaction from the user.

-d
  enable debug (set -x)

-i
  interactive
  if enabled, we might require some human interaction; it is not the default

-t
  specify the target platform; output will be changed accordingly.
  Known values:
   - linux64
   - osx
   - win64
   - win64-manual
  By default: $FACTORIO_TARGET

-o output
  specify output file.
  Default value, depending on the target:
   - factorio_alpha_x64_<version>.tar.xz
   - factorio_alpha_<version>.dmg
   - Setup_Factorio_x64_<version>.exe
   - Factorio_x64_<version>.zip

-l login -p password
  specify login and password values to supply at https://factorio.com/login
  FACTORIO_LOGIN default value: $(whoami)
  FACTORIO_PASSWORD default value: <empty>
  NB: your shell logs input! Use an empty space in front of $0 if you use -p
  See also: \$HISTCONTROL, your shell's manual...

-y /path/player-data.json
  alternatively to using login and password, or even the \$FACTORIO_PASSWORD env
  variable, $0 can use the player-data.json file which holds a valid token as
  well as a factorio username
  FACTORIO_PD default value: $FACTORIO_PD

version
  either:
    - a number such as 0.16.51 or 0.17.58;
    - experimental (the default)*
    - stable*
  $0 supports the factorio:// prefix. This is meant to ease integration into
  build scripts, such as PKGBUILD(5) on Archlinux. As such, the following
  commands are equivalent:
    % $0 0.16.51
    % $0 factorio://0.16.51
  *version grabbing from the updater.factorio.com API is not officially
   documented, it is recommended to pass a version number
EOH
}

__warn() {
  echo "$1" >&2
}

__die() {
  echo "$1" >&2; exit "${2:-1}"
}

while getopts ":dhil:p:o:t:y:" _opt; do
  case "$_opt" in
    d) set -x                      ;;
    h) __usage; exit 0             ;;
    i) _interactive="1"            ;;
    t) FACTORIO_TARGET="$OPTARG"   ;;
    l) FACTORIO_LOGIN="$OPTARG"    ;;
    p) FACTORIO_PASSWORD="$OPTARG" ;;
    o) output_file="$OPTARG"       ;;
    y) FACTORIO_PD="$OPTARG"       ;;
    *) __die "$(__usage)" 1        ;;
  esac
done

shift "$((OPTIND-1))"

for _dep in curl jq; do
  if ! command -v "$_dep" >/dev/null 2>&1; then
    __die "$_dep needed but not found!" 2
  fi
done

# Grab the username and token from the player-data.json file
if [ -r "$FACTORIO_PD" ]; then
  FACTORIO_TOKEN="$(jq -r '.["service-token"]' < "$FACTORIO_PD")"
  if [ -z "$FACTORIO_LOGIN" ]; then
    _login_from_pd="$(jq -r '.["service-username"]' < "$FACTORIO_PD")"
    if ! [ "$_login_from_pd" = "null" ]; then
      FACTORIO_LOGIN="$_login_from_pd"
    fi
  fi
  if [ "$FACTORIO_TOKEN" = "null" ]; then
    unset FACTORIO_TOKEN
  fi
fi
if [ -z "$FACTORIO_LOGIN" ]; then
  FACTORIO_LOGIN="$(whoami)"
fi

# If we didn't get the token from the player-data file, we try to get one from
# the factorio-dl config file or from the factorio auth API
if [ -z "$FACTORIO_TOKEN" ]; then
  __warn "No token in $FACTORIO_PD"
  if [ -z "$FACTORIO_PASSWORD" ]; then
    if [ -z "$_interactive" ]; then
      __die "No password was set, aborting" 6
    else
      # We write a ~POSIX-compliant script; `read -s` doesn't work on e.g. FreeBSD
      stty -echo
      printf "Password: "
      read -r FACTORIO_PASSWORD
      stty echo
      printf '\n'
    fi
  fi
  _auth_url="https://auth.factorio.com/api-login?require_game_ownership=true"
  __warn "Trying to get one from $_auth_url"
  FACTORIO_TOKEN="$(curl --silent --fail -XPOST \
   "${_auth_url}&username=$FACTORIO_LOGIN&password=$FACTORIO_PASSWORD" |
   jq -rc '.[]')"
  if [ -z "$FACTORIO_TOKEN" ]; then
    __die "Didn't get a token using $FACTORIO_LOGIN and password" 7
  fi
fi

# We strip the "factorio://" prefix of the argument.
# It's needed because makepkg(1) will pass 'protocol://version' as $1
# Humans invoking the script can still use version alone as $1
version="${1#"factorio://"}"
_up_url="https://updater.factorio.com/get-available-versions"
case "$version" in
  ""|experimental)
    if [ -n "$FACTORIO_TOKEN" ]; then
      __warn "Trying updater.factorio.com for experimental, might be broken"
      version="$(curl -s \
       "${_up_url}?username=${FACTORIO_LOGIN}&token=${FACTORIO_TOKEN}" |
       jq -rc '."core-linux64"[]."to" | if . == null then empty else . end' |
       sort -V | tail -1
      )"
      __warn "Got $version"
    fi
    ;;
  stable)
    if [ -n "$FACTORIO_TOKEN" ]; then
      __warn "Trying updater.factorio.com for stable, might be broken"
      version="$(curl -s \
       "${_up_url}?username=${FACTORIO_LOGIN}&token=${FACTORIO_TOKEN}" |
       jq -rc '."core-linux64"[]?."stable" | if . == null then empty else . end'
      )"
      __warn "Got $version"
    fi
    ;;
esac
# Whatever happened above, $version should now hold a semantic version.
# If grep(1) fails below, we abort.
if ! printf '%s' "$version" | grep -qE '[0-9]+\.[0-9]+\.[0-9]+'; then
  __die "version looks very weird: $version" 3
fi

case "$FACTORIO_TARGET" in
  linux64) : "${output_file:="factorio_alpha_x64_${version}.tar.xz"}" ;;
  win64-manual) : "${output_file:="Factorio_x64_${version}.zip"}"     ;;
  win64) : "${output_file:="Setup_Factorio_x64_${version}.exe"}"      ;;
  osx) : "${output_file:="factorio_alpha_${version}.dmg"}"            ;;
  *) __die "Unknown target platform: $FACTORIO_TARGET" 5              ;;
esac

FACTORIO_URL="https://www.factorio.com/get-download/${version}/alpha/${FACTORIO_TARGET}"

curl -G --retry 10 --retry-delay 3 \
     --fail --location \
     --continue-at - \
     --data-urlencode "username=${FACTORIO_LOGIN}" \
     --data-urlencode "token=${FACTORIO_TOKEN}" \
     --output "${output_file}.part" \
     "${FACTORIO_URL}" \
|| rm -f "${output_file}.part"

if [ ! -f "${output_file}.part" ]; then
  __die "Download failed" 9
fi

if [ -f "${output_file}.part" ]; then
  mv "${output_file}.part" "${output_file}"
fi

